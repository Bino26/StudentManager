
 @page "/register/invitation"
@attribute [Authorize(Roles = "Student")]
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ISnackbar snackbar


<PageTitle>Register</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Welcome ! Enjoy your registration with your link</MudText>

<EditForm Model="@RegisterUser" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Email" T="string" Text="@email" />
                    <MudTextField Label="UserName"
                                  @bind-Value="RegisterUser.Username" For="@(() => RegisterUser.Username)" />
                    <MudTextField Label="Password" Class="mt-3"
                                  @bind-Value="RegisterUser.Password" For="@(() => RegisterUser.Password)" />
                </MudCardContent>
                <MudCardActions>
                    <MudPaper Class="d-flex flex-column flex-grow-1 gap-4" Elevation="0">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Register</MudButton>
                    </MudPaper>
                </MudCardActions>

            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>



@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public string Token { get; set; } = string.Empty;

    private InviteRegistration RegisterUser { get; set; } = new();
    private string? Message;
    private string email { get; set; } = string.Empty;


    protected override async  Task OnParametersSetAsync()
    {
        var response= await httpClient.GetStringAsync($"/api/registration/getmail?token={Token}");
        if(response is not null)
        {
            email = response;

        }
        else
        {
            email = " Your Email";
        }

    }
    

    private async Task HandleRegister()
    {
        Message = string.Empty;
        var response = await httpClient.PostAsJsonAsync($"/api/registration/register/invitation?token={Token}", RegisterUser);
        if (!response.IsSuccessStatusCode)
        {
            Message = "Error occured";
            snackbar.Add("Registration Failed", Severity.Error);
            return;
        }
        RegisterUser = new();
        snackbar.Add("Registered with sucess", Severity.Success);
        navigationManager.NavigateTo("/login");
    }
}