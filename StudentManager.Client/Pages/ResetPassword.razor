@page "/resetpassword"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ISnackbar snackbar

<EditForm Model="@ResetPasswordModel" OnValidSubmit="HandleResetPassword">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Email"
                                  @bind-Value="ResetPasswordModel.Email" For="@(() => ResetPasswordModel.Email)" />
                    <MudTextField Label="New Password" InputType="@PasswordInput" Class="mt-3"
                                  @bind-Value="ResetPasswordModel.newPassword" For="@(() => ResetPasswordModel.newPassword)" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" AdornmentAriaLabel="Show Password" />
                    <MudTextField Label="Confirm Password" InputType="@PasswordInput" Class="mt-3"
                                  @bind-Value="ResetPasswordModel.confirmPassword" For="@(() => ResetPasswordModel.confirmPassword)" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" AdornmentAriaLabel="Show Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudPaper Class="d-flex flex-column flex-grow-1 gap-4" Elevation="0">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Reset Password</MudButton>
                    </MudPaper>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public string Token { get; set; } = string.Empty;

    private ResetPasswordDto ResetPasswordModel { get; set; } = new();

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private async Task HandleResetPassword()
    {
        var response = await httpClient.PostAsJsonAsync<ResetPasswordDto>($"/api/User/ResetPassword?token={Token}", ResetPasswordModel);
        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            snackbar.Add($"Error: {errorMessage}", Severity.Error);
            
        }
        
        snackbar.Add("Your password has been changed successfully.", Severity.Success);
        navigationManager.NavigateTo("/login");
       
    }

    void TogglePasswordVisibility()
    {
        isShow = !isShow;
        PasswordInput = isShow ? InputType.Text : InputType.Password;
        PasswordInputIcon = isShow ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }
}