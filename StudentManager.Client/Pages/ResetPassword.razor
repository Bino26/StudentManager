@page "/resetpassword"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ISnackbar snackbar


<EditForm Model="@ResetPasswordModel" OnValidSubmit="HandleResetPassword">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Email"
                                  @bind-Value="ResetPasswordModel.Email" For="@(() => ResetPasswordModel.Email)" />
                    <MudTextField Label="Old Password" InputType="@PasswordInput" Class="mt-3"
                                  @bind-Value="ResetPasswordModel.oldPassword" For="@(() => ResetPasswordModel.oldPassword)" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="HidePasswordclick" AdornmentAriaLabel="Show Password" />
                    <MudTextField Label=" New Password" InputType="@PasswordInput" Class="mt-3"
                                  @bind-Value="ResetPasswordModel.newPassword" For="@(() => ResetPasswordModel.newPassword)" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="HidePasswordclick" AdornmentAriaLabel="Show Password" />
                    <ValidationSummary />
                </MudCardContent>
                <MudCardActions>
                    <MudPaper Class="d-flex flex-column flex-grow-1 gap-4" Elevation="0">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Reset Password</MudButton>
                    </MudPaper>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public string Token { get; set; } = string.Empty;
    public string Message { get; set; } = string.Empty;

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private ResetPasswordDto ResetPasswordModel { get; set; } = new ();

    private async Task HandleResetPassword()
    {
        Message = string.Empty;
        var response = await httpClient.PostAsJsonAsync($"/api/user/resetpassword?token={Token}", ResetPasswordModel);
        if (!response.IsSuccessStatusCode)
        {
            Message = "Error occured";
            snackbar.Add(Message, Severity.Error);
            return;
        }
        ResetPasswordModel = new();
        snackbar.Add("Your Password has been changed with sucess", Severity.Success);
        navigationManager.NavigateTo("/login");
    }

    void HidePasswordclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    


}
