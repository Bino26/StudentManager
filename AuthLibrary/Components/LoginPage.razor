@inject AuthenticationStateProvider authStateProvider
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ISnackbar snackbar


<PageTitle>Login</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Login</MudText>

<EditForm Model="@LoginUser" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Email" 
                                  @bind-Value="LoginUser.Email" For="@(() => LoginUser.Email)" />
                    <MudTextField Label="Password"  Class="mt-3"
                                  @bind-Value="LoginUser.Password" InputType="@PasswordInput" For="@(() => LoginUser.Password)" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="HidePasswordclick" AdornmentAriaLabel="Show Password" />
                    <MudLink Href="/forgot-password" Class="mt-3">Forgot Password?</MudLink>
                </MudCardContent>
                <MudCardActions>
                    <MudPaper Class="d-flex flex-column flex-grow-1 gap-4" Elevation="0">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" >Login</MudButton>
                    </MudPaper>
                </MudCardActions>

            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    private LoginRequest LoginUser { get; set; } = new();
    private string? Message;
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    private async Task HandleLogin()
    {
        

        Message = string.Empty;
        var response = await httpClient.PostAsJsonAsync("api/user/login", LoginUser);
        if (!response.IsSuccessStatusCode)
        {
            snackbar.Add("Invalid Credentials", Severity.Error);
            return;
        }

        var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
        if (string.IsNullOrEmpty(result!.JwtToken)) return;

        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", result.JwtToken);
        var getUserClaims = await httpClient.GetAsync("api/user/user");
        if (!getUserClaims.IsSuccessStatusCode) return;

        var userDetails = await getUserClaims.Content.ReadFromJsonAsync<User>();
        var authenticationModel = new AuthenticationModel()
            {
                Token = result.JwtToken,
                RefreshToken = result.JwtToken,
                Username = userDetails!.Email,
                Role = userDetails!.Role,
            };

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(authenticationModel);
        snackbar.Add("Logged with sucess", Severity.Success);

        var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsInRole("Admin"))
        {
            navigationManager.NavigateTo("/admin/students");
        }
        else  
        {
            navigationManager.NavigateTo("/collegeinfo");
        }
       
    }

    void HidePasswordclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}